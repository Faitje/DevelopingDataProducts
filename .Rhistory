library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
install.packages("ROAuth")
install.packages("twitteR")
install.packages("wordcloud")
install.packages("tm")
library("ROAuth")
library("twitteR")
library("wordcloud")
library("tm")
cred <- OAuthFactory$new(consumerKey='secret',
consumerSecret='secret',
requestURL='https://api.twitter.com/oauth/request_token',
accessURL='https://api.twitter.com/oauth/access_token',
authURL='https://api.twitter.com/oauth/authorize')
registerTwitterOAuth(cred)
cred$handshake(cainfo="cacert.pem")
cred <- OAuthFactory$new(consumerKey='6xN3xfh0u9oPVOI5GYeH3sbxg',
consumerSecret='eHm6eC5kAa39YoYcDStfDieP8oBu93tjXEI8ZQApnb30TItOdq',
requestURL='https://api.twitter.com/oauth/request_token',
accessURL='https://api.twitter.com/oauth/access_token',
authURL='https://api.twitter.com/oauth/authorize')
registerTwitterOAuth(cred)
cred <- OAuthFactory$new(consumerKey='6xN3xfh0u9oPVOI5GYeH3sbxg',
consumerSecret='eHm6eC5kAa39YoYcDStfDieP8oBu93tjXEI8ZQApnb30TItOdq',
requestURL='https://api.twitter.com/oauth/request_token',
accessURL=' https://api.twitter.com/oauth/authorize',
authURL='https://api.twitter.com/oauth/authorize')
registerTwitterOAuth(cred)
r_stats<- searchTwitter("#KLM", n=1500)
cred$handshake(cainfo="cacert.pem")
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "http://api.twitter.com/oauth/access_token"
authURL <- "http://api.twitter.com/oauth/authorize"
consumerKey <- "6xN3xfh0u9oPVOI5GYeH3sbxg"
consumerSecret <- " eHm6eC5kAa39YoYcDStfDieP8oBu93tjXEI8ZQApnb30TItOdq"
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
twitCred$handshake()
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
twitCred$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
twitCred$handshake()
library("ROAuth")
library("twitteR")
library("wordcloud")
library("tm")
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "http://api.twitter.com/oauth/access_token"
authURL <- "http://api.twitter.com/oauth/authorize"
consumerKey <- "6xN3xfh0u9oPVOI5GYeH3sbxg"
consumerSecret <- " eHm6eC5kAa39YoYcDStfDieP8oBu93tjXEI8ZQApnb30TItOdq"
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
twitCred$handshake()
install.packages("RCurl")
install.packages("RCurl")
install.packages("RCurl")
install.packages("RCurl")
library("RCurl")
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
download.file(url="http://curl.haxx.se/ca/cacert.pem", destfile="cacert.pem")
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "http://api.twitter.com/oauth/access_token"
authURL <- "http://api.twitter.com/oauth/authorize"
consumerKey <- "6xN3xfh0u9oPVOI5GYeH3sbxg"
consumerSecret <- " eHm6eC5kAa39YoYcDStfDieP8oBu93tjXEI8ZQApnb30TItOdq"
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
library("ROAuth")
library("twitteR")
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
twitCred$handshake()
twitCred <- getTwitterOAuth(consumer_key= consumerKey, consumer_secret=consumerSecret)
install.packages(c("devtools," "rjson", "bit64", "httr"))
install.packages(c("devtools", "rjson", "bit64", "httr"))
install.packages(c("devtools", "rjson", "bit64", "httr"))
library(devtools)
library(twitteR)
setup_twitter_oauth("6xN3xfh0u9oPVOI5GYeH3sbxg","eHm6eC5kAa39YoYcDStfDieP8oBu93tjXEI8ZQApnb30TItOdq")
library(devtools)
install_github("twitteR", username="geoffjentry")
library(twitteR)
api_key <- "6xN3xfh0u9oPVOI5GYeH3sbxg"
api_secret <- "eHm6eC5kAa39YoYcDStfDieP8oBu93tjXEI8ZQApnb30TItOdq"
access_token <- "2950818489-XFqnOT99uVUGNMaQgnTZYODl4yMlGiJh67MDkmu"
access_token_secret <- "8YQKfoLwhZrGGhTGmYLUlDBJBmrrIadwQXBsCANrVGF8p"
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
r_stats<- searchTwitter("#KLM", n=1500)
r_stats_text <- sapply(r_stats, function(x) x$getText())
r_stats_text_corpus <- Corpus(VectorSource(r_stats_text))
library("wordcloud")
library("tm")
r_stats_text_corpus <- Corpus(VectorSource(r_stats_text))
r_stats_text_corpus <- tm_map(r_stats_text_corpus, content_transformer(tolower))
r_stats_text_corpus <- tm_map(r_stats_text_corpus, removePunctuation)
r_stats_text_corpus <- tm_map(r_stats_text_corpus, function(x)removeWords(x,stopwords()))
wordcloud(r_stats_text_corpus)
r_stats_text_corpus <- tm_map(r_stats_text_corpus,
content_transformer(function(x) iconv(x, to='UTF-8-MAC', sub='byte')),
mc.cores=1
)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
data(airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
lambda <- 0.2
lambda
mean <- 1/lambda
library(ggplot2)
nosim <- 1000
cfunc <- function(x, n) sqrt(n) * (mean(x) - 3.5) / 1.71
dat <- data.frame(
x = c(apply(matrix(sample(1 : 6, nosim * 10, replace = TRUE),
nosim), 1, cfunc, 10),
apply(matrix(sample(1 : 6, nosim * 20, replace = TRUE),
nosim), 1, cfunc, 20),
apply(matrix(sample(1 : 6, nosim * 30, replace = TRUE),
nosim), 1, cfunc, 30)
),
size = factor(rep(c(10, 20, 30), rep(nosim, 3))))
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2)
g + facet_grid(. ~ size)
nosim <- 1000
n <- 40
sd(apply(matrix(rnorm(nosim * n), nosim), 1, mean))
lambda <- 0.2
mean <- 1/lambda
x <- rexp(n, lambda)
?rexp
nosim <- 1000
n <- 40
lambda <- 0.2
mean <- 1/lambda
sd <- 1/lambda
ed <- rexp(n, lambda)
ed =  rexp(n, lambda)
for (i in 1 : 1000) ed = c(ed, mean(runif(40)))
hist(mns)
hist(ed)
set.seed(42)    # Seed for reproducability
df <- data.frame(mean = numeric(nosim)) # data frame to store all the sample means
for (i in 1:nosim) {            # simulate nosim times
samples <-rexp(n,lambda)      # simulate n samples
sim[i,1]<-mean(samples)       # sample mean
}
for (i in 1:nosim) {            # simulate nosim times
samples <- rexp(n, lambda)      # simulate n samples
df[i,1] <- mean(samples)       # sample mean
}
View(df)
theoretical.mean <- 1/lambda
sample.mean <- mean(df$mean)
theoretical.mean
sample.mean
theoretical.variance <- ((1/lambda)^2)/n     # Theoretical variance
sample.variance <- var(df$mean)    # Sample variance
theoretical.variance
sample.variance
hist(df$mean)
hist(df$mean, main = "Histogram of sample means", xlab = "Sample means")
load(ToothGrowth)
data(ToothGrowth)
str(ToothGrowth)
summary(ToothGrowth)
ToothGrowth$dose <-as.factor(ToothGrowth$dose)
summary(ToothGrowth)
table <- table(ToothGrowth$dose, ToothGrowth$supp)
table
summary <- aggregate(ToothGrowth, by = list(dose, supp), FUN = mean)
summary <- aggregate(ToothGrowth, by = list(ToothGrowth$dose, ToothGrowth$supp), FUN = mean)
warnings()
str(ToothGrowth)
summary <- aggregate(ToothGrowth, by = list(ToothGrowth$len), FUN = mean)
summary <- aggregate(supp ~ dose, data = ToothGrowth, mean)
summary <- aggregate(ToothGrowth$len, by = list(ToothGrowth$len), FUN = mean)
summary
summary <- aggregate(ToothGrowth$len, by = list(ToothGrowth$supp, ToothGrowth$dose), FUN = mean)
summary
colnames(summary) <- c("supp", "dose", "len.mean")
summary
summary(ToothGrowth)
t.supp <- t.test(ToothGrowth$supp ~ ToothGrowth$len)
t.dose <- t.test(ToothGrowth$dose ~ ToothGrowth$len)
t.supp <- t.test(ToothGrowth$len ~ ToothGrowth$supp)
t.dose <- t.test(ToothGrowth$len ~ ToothGrowth$dose)
t.test(len ~ supp, data = ToothGrowth)
t.dose <- t.test(len ~ dose, data = ToothGrowth)
data(ToothGrowth)       # Load data
str(ToothGrowth)        # Structure of the data
ToothGrowth$dose <-as.factor(ToothGrowth$dose) # The dose is numeric but for analysis purposes should be a factor
summary(ToothGrowth)
```
2. Basic summary of the ToothGrowth data. There seems to be a higher mean when the dose gets higher. OJ seems to get a higher mean of tooth growth.
```{r}
summary <- aggregate(ToothGrowth$len, by = list(ToothGrowth$supp, ToothGrowth$dose), FUN = mean)
colnames(summary) <- c("supp", "dose", "len.mean")
summary
t.supp <- t.test(len ~ supp, data = ToothGrowth, paired = TRUE)
t.supp
t.supp <- t.test(len ~ dose, data = ToothGrowth, paired = TRUE) # Test the different supplements
t.supp
t.supp <- t.test(len ~ supp, data = ToothGrowth) # Test the different supplements
t.supp
low <-subset(ToothGrowth, dose == 0.5)
medium <-subset(ToothGrowth, dose == 1.0)
high <-subset(ToothGrowth, dose == 2.0)
# Performing the test for all dossages individually
t.lowSupp <- t.test(len ~ supp, data = low, paired=FALSE)
t.mediumSupp <- t.test(len ~ supp, data = medium, paired=FALSE)
t.highSupp <- t.test(len ~ supp, data = high, paired=FALSE)
t.lowSupp
t.mediumSupp
t.highSupp
set1 <-subset(ToothGrowth, dose %in% c(0.5, 1.0))
set2 <-subset(ToothGrowth, dose %in% c(1.0, 2.0))
set3 <-subset(ToothGrowth, dose %in% c(2.0, 0.5)
# Performing the test for all pairs
t.set1 <- t.test(len ~ supp, data = set1, paired=FALSE)
t.set2 <- t.test(len ~ supp, data = set2, paired=FALSE)
t.set3 <- t.test(len ~ supp, data = set3, paired=FALSE)
# Test results
t.set1
t.set2
t.set3
set1 <- subset(ToothGrowth, dose %in% c(0.5, 1.0))
set2 <- subset(ToothGrowth, dose %in% c(1.0, 2.0))
set3 <- subset(ToothGrowth, dose %in% c(2.0, 0.5))
# Performing the test for all pairs
t.set1 <- t.test(len ~ supp, data = set1, paired=FALSE)
t.set2 <- t.test(len ~ supp, data = set2, paired=FALSE)
t.set3 <- t.test(len ~ supp, data = set3, paired=FALSE)
# Test results
t.set1
t.set2
t.set3
set1 <- subset(ToothGrowth, dose %in% c(0.5, 1.0))
set2 <- subset(ToothGrowth, dose %in% c(1.0, 2.0))
set3 <- subset(ToothGrowth, dose %in% c(2.0, 0.5))
# Performing the test for all pairs
t.set1 <- t.test(len ~ dose, data = set1, paired=FALSE)
t.set2 <- t.test(len ~ dose, data = set2, paired=FALSE)
t.set3 <- t.test(len ~ dose, data = set3, paired=FALSE)
# Test results
t.set1
t.set2
t.set3
t.lowSupp$p.value
df.dose <- data.frame( low = c(t.set1$p.value, t.set2$p.value, t.set3$p.value),
high = c(t.set1$conf.int, t.set2$conf.int, t.set3$conf.int))
df.dose
df.dose <- data.frame( low = c(t.set1$p.value, t.set2$p.value, t.set3$p.value))
df.dose
df.dose <- data.frame( p.values = c(t.set1$p.value, t.set2$p.value, t.set3$p.value))
rownames(df.dose) <- c( "set1", "set2", "set.3")
df.dose
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
33/36
deck
52
4/52
1*3/51*2/50*1/49
info()
0
16/52
12/52
2/51
swirl()
library(swirl)
swirl()
(1.6*.8)/2
.64
mypdf
mypdf(1.6)
integrate(mypdf,0,1.6)
integrate(mypdf,0,1.6)/2
integrate(mypdf,0,1.6)/2
.3
.5
1,4
1.4
equiv_val(sqrt(2))
1.414214
.997*.001
(1-.985)*(1-.001)
.000997/(.000997+.14985)
.000997/(.000997+.014985)
3.5
expect_dice()
expect_dice(pmf)
pmf
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
3.5
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam,1,mean)
mean(smeans)
install_from_swirl("Regression Models")
library(swirl)
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
fit <- lr(child ~ parent, galton)
fit <- lm(child ~ parent, galton)
summary(fir)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
rhs-lhs
lhs-rhs
all.equal(lhs,rhs)
View(galton)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(ols.slope)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild,sum(varRes,varEst))
all.equal(varChild,varEst+varRes)
fit <- lm(accel ~ mag+dist, attenu)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals,attenu$mag)
cov(efit$residuals,attenu$dist)
library(swirl)
swirl()
fit <- ls(child ~ parent, galton)
fit <- lm(child ~ parent, galton)
ggy
n^2/(n-)
n^2/(n-2)
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- (mean(galton$child))
mu <- mean(galton$child)
sTot <- galton$child-mu
sTot <- sum((galton$child-mu)^2)
sRes <- sum(res^2)
sRes <- sum(sTot^2)
sRes <- deviance(fit)
1- sRes/sTot
summary(fit)$r
summary(fit)$r.squared
cor(galton$child,galton$parent)^2
ones <- rep(1,nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1,galton)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit<-lm(y~x)
est<-predict(fit,data.frame(x))
summary(fit)
fit <- lm(mpg ~ wt, mtcars)
est<-predict(fit,data.frame(x))
summary(fit)
quantiles(fit)
quantile(fit)
newdata <- data.frame(mean(mtcars$wt))
p1 <- predict(fit, newdata, interval = ("confidence"))
newdata <- data.frame(mean(x=(mtcars$wt))
newdata <- data.frame(mean(x=(mtcars$wt)))
p1 <- predict(fit, newdata, interval = ("confidence"))
x<-mtcars$wt
y<-mtcars$mpg
fit<-lm(y ~ x)
predict(fit,data.frame(x=mean(x)), interval="confidence")
?mtcars
rm(list=ls()) # clean environment
y <- mtcars$mpg; x <- mtcars$wt
fitWithIntercept <- lm(y ~ x)
yhat1 <- fit$coefficients[1] + x
se1 <- sum((y - yhat1)^2)
yhat2 <- fit$coefficients[1] + fit$coefficients[2] * x
se2 <- sum((y - yhat2)^2)
ratio <- se2 / se1
fit <- lm(y ~ x)
fitWithIntercept <- lm(y ~ x)
yhat1 <- fit$coefficients[1] + x
se1 <- sum((y - yhat1)^2)
yhat2 <- fit$coefficients[1] + fit$coefficients[2] * x
se2 <- sum((y - yhat2)^2)
ratio <- se2 / se1
library(MASS)
?shuttle
shuttle$use.binary <- as.integer(shuttle$use == "auto")
fit <- glm(use.binary ~ wind - 1, data = shuttle, family = binomial)
summary(fit)$coef
unname(exp(coef(fit))[1]/exp(coef(fit))[2])
fit <- glm(use.binary ~ wind + magn - 1, data = shuttle, family = binomial)
exp(coef(fit))
unname(exp(coef(fit))[1]/exp(coef(fit))[2])
data(mtcars)
boxplot(mpg ~ am, data = mtcars,
col = c("dark grey", "light grey"),
xlab = "Transmission",
ylab = "Miles per Gallon",
main = "MPG by Transmission Type")
mtcars$am <- as.factor(mtcars$am)
levels(mtcars$am) <- c("Automatic", "Manual")
boxplot(mpg ~ am, data = mtcars,
col = c("dark grey", "light grey"),
xlab = "Transmission",
ylab = "Miles per Gallon",
main = "MPG by Transmission Type")
boxplot(mpg ~ am, data = mtcars,
col = c("dark blue", "light blue"),
xlab = "Transmission",
ylab = "Miles per Gallon",
main = "MPG by Transmission Type")
boxplot(mpg ~ am, data = mtcars,
col = c("blue", "light blue"),
xlab = "Transmission",
ylab = "Miles per Gallon",
main = "MPG by Transmission Type")
data(mtcars)
head(mtcars)
boxplot(mpg ~ am, data = mtcars,
col = c("blue", "light blue"),
xlab = "Transmission (0 = automatic, 1 = manual)",
ylab = "Miles/(US) gallon ",
main = "MPG by Transmission Type")
ttest <- t.test(mtcars$mpg~mtcars$am,conf.level=0.95)
ttest$p.value
model <- step(lm(data = mtcars, mpg ~ .), trace=0)
model
model$coefficients
par(mfrow = c(2, 2))
plot(fit.2)
par(mfrow = c(2, 2))
plot(model)
model1 <- lm(data = mtcars, mpg ~ .)
model1
summary(model1)
model1 <- lm(data = mtcars, mpg ~ am)
summary(model1)
model1 <- lm(data = mtcars, mpg ~ am)
summary(model1)
summary(model2)$coefficients
model2 <- step(lm(data = mtcars, mpg ~ .), trace=0)
summary(model2)$coefficients
summary(model1)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("AppliedPredictiveModeling", "caret")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
setwd("~/DataScience")
setwd("~/DataScience/App")
